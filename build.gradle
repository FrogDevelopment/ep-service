plugins {
    id 'java'
    id 'jacoco'
    id 'com.vaadin' version '0.14.3.7'
//    id 'org.sonarqube' version '2.8'
    id 'io.freefair.lombok' version '5.3.0'
    id 'com.google.cloud.tools.jib' version '2.7.1'
    id 'fr.brouillard.oss.gradle.jgitver' version '0.9.1'
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

defaultTasks('clean', 'vaadinBuildFrontend', 'build')

group = 'fr.frogdevelopment'
sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.vaadin.com/vaadin-addons' }
    maven { url 'https://maven.google.com/' }
}

dependencyManagement {
    imports {
        mavenBom 'org.junit:junit-bom:5.7.0'
        mavenBom 'org.testcontainers:testcontainers-bom:1.15.1'
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.0'
        mavenBom 'com.vaadin:vaadin-bom:14.4.6'
    }
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 10, 'seconds'
    }
}

dependencies {
    annotationProcessor 'org.springframework:spring-context-indexer'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation('com.vaadin:vaadin-spring-boot-starter') {
//         Webjars are only needed when running in Vaadin 13 compatibility mode
        ["com.vaadin.webjar", "org.webjars.bowergithub.insites",
         "org.webjars.bowergithub.polymer", "org.webjars.bowergithub.polymerelements",
         "org.webjars.bowergithub.vaadin", "org.webjars.bowergithub.webcomponents"]
                .forEach { group -> exclude(group: group) }
    }

    implementation 'org.vaadin.stefan:fullcalendar2:2.0.0'

    implementation 'org.apache.poi:poi-ooxml:5.0.0'
    implementation 'org.apache.commons:commons-lang3:3.11'

    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.8'

    implementation 'org.jolokia:jolokia-core'
//        implementation 'net.logstash.logback:logstash-logback-encoder:6.4'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'

    testImplementation 'com.vaadin:vaadin-testbench'

    testRuntime 'org.junit.platform:junit-platform-runner'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

lombok {
    config['lombok.anyConstructor.addConstructorProperties'] = 'true'
}

jgitver {
    strategy = 'PATTERN'
    versionPattern = '${v}-SNAPSHOT'
    tagVersionPattern = '${v}'
}

springBoot {
    buildInfo()
}

vaadin {
  pnpmEnable = false
}

test {
    reports.html.enabled = false

    useJUnitPlatform {
        includeTags 'unitTest', 'integrationTest'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test.xml")
        csv.enabled false
        html.enabled false
    }
}

//sonarqube {
//    properties {
//        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test.xml"
//        property 'sonar.projectKey', 'FrogDevelopment_xls2glide'
//        property 'sonar.organization', 'frogdevelopment'
//        property 'sonar.host.url', 'https://sonarcloud.io'
//    }
//}
//
//project.tasks["sonarqube"].dependsOn "jacocoTestReport"

jib {
    from {
        image = 'frogdevelopment/docker-adoptopenjdk14-curl:latest'
    }
    to {
        afterEvaluate {
            image = "frogdevelopment/${name}"
            tags = [version.toString(), gitBranch()]
        }
    }
    container {
        jvmFlags = ['-Xmx128m']
        volumes = ["/tmp"]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        afterEvaluate {
            labels = [
                    'frog.image_base': jib.from.image,
                    'frog.version'   : version.toString()
            ]
        }
    }
}

wrapper {
    gradleVersion = '6.8.1'
    distributionType = Wrapper.DistributionType.ALL
}

def gitBranch() {
    def branch = ''
    def proc = 'git rev-parse --abbrev-ref HEAD'.execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch.replaceAll("/", "_")
}

