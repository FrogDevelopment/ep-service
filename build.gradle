plugins {
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
    id 'io.freefair.lombok' version '4.1.6'
    id 'com.google.cloud.tools.jib' version '2.0.0'
    id 'fr.brouillard.oss.gradle.jgitver' version '0.9.1'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group = 'fr.frogdevelopment'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()
    maven{
        url = 'https://maven.google.com/'
    }
    maven {
        url = "$repoUrl/libs-public"
    }
}

dependencyManagement {
    imports {
        mavenBom 'org.junit:junit-bom:5.6.0'
        mavenBom 'org.testcontainers:testcontainers-bom:1.12.5'
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR1'
    }
}

dependencies {
    annotationProcessor "org.springframework:spring-context-indexer"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    implementation 'com.google.api-client:google-api-client:1.30.8'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev607-1.25.0'

    implementation 'org.apache.commons:commons-lang3:3.9'

    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'

    def tcPgroongaVersion = '0.0.0-SNAPSHOT'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "fr.frogdevelopment.testcontainers:pgroonga:$tcPgroongaVersion"

    testRuntime 'org.junit.platform:junit-platform-runner'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jgitver {
    mavenLike true
}

springBoot {
    buildInfo()
}

test {
    reports.html.enabled = false

    useJUnitPlatform {
        includeTags 'unitTest', 'integrationTest'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test.xml")
        csv.enabled false
        html.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test.xml"
        property "sonar.projectKey", "FrogDevelopment_xls2glide"
        property "sonar.organization", "frogdevelopment"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

project.tasks["sonarqube"].dependsOn "jacocoTestReport"

jib {
    from {
        image = 'adoptopenjdk:11.0.5_10-jre-openj9-0.17.0-bionic'
    }
    to {
        image = "frogdevelopment/${name}"
    }
    container {
        jvmFlags = ['-Xmx128m', '-noverify']
        ports = ['8080']
        volumes = ["/tmp"]
    }
}

